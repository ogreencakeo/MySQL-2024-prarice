[ B-tree(균형 트리) 개념 ]
B-tree는 데이터를 저장하고 검색하기 위한 효율적인 자료구조로, 각 노드가 여러 개의 자식을 가질 수 있는 트리 형태입니다. 
높은 효율성과 균형 있는 트리 구조로 인해 데이터베이스 인덱스 구현에 많이 사용됩니다.

[ 데이터가 존재하는 공간 노드 ]
B-tree에서 데이터가 저장되는 공간을 노드라고 합니다. 
이 노드들은 트리 구조로 연결되어 있습니다.

[ 노드의 종류 ]
루트 노드: 
트리의 가장 상위에 위치한 노드로, 모든 다른 노드는 루트 노드를 통해 접근합니다.

리프 노드: 
트리의 말단 노드로, 실제 데이터가 저장되는 곳입니다.

중간 수준 노드: 
루트 노드와 리프 노드 사이의 내부 노드로, 다른 노드로의 경로를 제공합니다.

[ 페이지 ]
데이터베이스에서 디스크에 저장된 블록을 가리키는 단위를 말합니다. 
B-tree에서 각 노드는 페이지에 저장됩니다.

[ B-Tree 구조에서 MMM 데이터 검색 ]
루트 노드에서 시작하여 MMM이 위치할 곳을 찾습니다.
리프 노드에 도달하여 해당 데이터를 찾거나, 데이터가 없는 경우 이진 탐색을 통해 가까운 값이 있는 위치를 찾습니다.

[ 페이지 분할 ] 
새로운 데이터가 삽입될 때 페이지의 용량을 초과하면 페이지를 분할하여 새로운 데이터를 수용할 수 있도록 합니다.

[ 클러스터형 인덱스와 보조 인덱스 ]
클러스터형 인덱스: 
인덱스의 순서와 실제 데이터의 물리적 저장 순서가 동일한 인덱스입니다. 
테이블 자체의 순서를 변경시킬 수 있습니다.

보조 인덱스: 
테이블의 물리적 순서와는 관계없이 별도의 인덱스를 만드는 것으로, 보조 인덱스를 통해 테이블에 빠르게 접근할 수 있습니다.

[ 위치 포인터 ]
인덱스를 통해 데이터의 위치를 찾아가기 위한 포인터로, 실제 데이터 레코드가 저장된 위치를 가리킵니다.

[ 클러스터형 인덱스와 보조 인덱스 차이점 ]
클러스터형 인덱스는 테이블과 인덱스의 물리적 순서가 일치하지만, 보조 인덱스는 그렇지 않습니다.
클러스터형 인덱스는 테이블의 주 인덱스이며, 보조 인덱스는 보조적인 인덱스로 테이블의 레코드를 빠르게 찾기 위해 사용됩니다.

[ 클러스터형 인덱스와 보조 인덱스에서 데이터 검색 차이점 ]
클러스터형 인덱스는 인덱스를 통해 바로 데이터 레코드를 찾을 수 있어 빠르게 접근할 수 있습니다.
보조 인덱스는 데이터 레코드의 위치를 찾기 위해 먼저 인덱스를 찾은 다음, 해당 위치로 이동하여 데이터에 접근해야 합니다.

[ 보조 인덱스의 성능 부하 ]
클러스터형 인덱스는 데이터와 인덱스가 일치하여 성능이 좋지만, 
보조 인덱스는 별도의 인덱스를 관리해야 하므로 성능 부하가 클러스터형 인덱스보다 더 적을 수 있습니다.

[ 클러스터형 인덱스 특징, 보조 인덱스 특징 ] 
클러스터형 인덱스: 
데이터와 인덱스가 일치하여 인덱스 검색 속도가 빠르지만, 데이터의 추가 및 수정에 따른 성능 저하 가능성이 있습니다.

보조 인덱스: 
데이터의 물리적 순서와는 관계없이 인덱스를 생성하여 빠른 검색을 지원하며, 데이터 변경에 따른 영향을 최소화할 수 있습니다.

