1. View란 무엇인가요?
View는 하나 이상의 테이블에서 가져온 데이터로 구성된 가상 테이블입니다. 
실제 데이터를 저장하지 않고, 저장된 테이블로부터 데이터를 동적으로 조회하고 표현할 수 있습니다.

2. View의 장점은 무엇인가요?
데이터 보안: 특정 사용자에게 필요한 열만 포함하여 데이터를 제공할 수 있습니다.
간편성: 복잡한 쿼리를 View로 정의하여 간단하게 접근할 수 있습니다.
재사용성: 동일한 데이터를 여러 쿼리에서 사용할 수 있습니다.

3. View를 생성하는 방법은 무엇인가요?
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

여기서 view_name은 생성할 View의 이름, column1, column2, ...은 View에서 보여줄 열 이름, table_name은 데이터를 가져올 기존 테이블의 이름, condition은 선택적인 조건입니다.

4. View를 사용하는 방법은?
View가 생성되면 다음과 같이 일반 테이블처럼 사용할 수 있습니다.

SELECT * FROM view_name;

또는 

SELECT column1, column2 FROM view_name WHERE condition;

5. View의 제약사항은 무엇인가요?

View는 기본 테이블로부터 생성된 데이터의 가상 집합이므로 데이터를 직접 수정할 수 없습니다.
View를 수정하려면 해당 View를 구성하는 기본 테이블을 수정해야 합니다.
View는 복잡한 쿼리를 단순하게 표현할 수 있지만, 성능에 영향을 줄 수 있습니다.

6. View의 종류에는 어떤 것이 있나요?

단순 View(Simple View): 하나의 기본 테이블에서 생성된 View입니다.
조인 View(Joined View): 둘 이상의 테이블을 조인하여 생성된 View입니다.
복합 View(Complex View): 집계 함수 등을 사용하여 생성된 View로, 복잡한 로직을 가질 수 있습니다.

---------------------------------------------------------------------------------------------------------------------
[ 뷰를 통한 데이터 변경 가능성과 주의사항 ]

뷰에 INSERT 하기:
뷰를 통해 데이터를 INSERT 할 수 있습니다. 
하지만, 뷰에 대한 INSERT 작업은 실제로 뷰가 기반으로 하는 기본 테이블에 영향을 미칩니다.

주의사항:
제약 조건: 뷰에 INSERT를 수행할 때, 뷰가 기반으로 하는 기본 테이블에 설정된 제약 조건(예: NOT NULL, UNIQUE, FOREIGN KEY 등)을 준수해야 합니다. 
따라서 뷰에 데이터를 INSERT 할 때는 해당 제약 조건을 고려해야 합니다.

업데이트 가능 뷰(Updatable View): 뷰를 생성할 때 사용된 쿼리의 종류에 따라 뷰가 업데이트 가능한지 여부가 결정됩니다. 
단순한 SELECT 쿼리로 생성된 뷰는 일반적으로 업데이트가 불가능할 수 있습니다.

칼럼 제한: 뷰에 INSERT를 수행할 때, 뷰가 직접적으로 사용하지 않는 컬럼에 대해서는 데이터를 제공해야 합니다. 
뷰에서 사용되지 않는 컬럼에는 기본값이나 NULL 값을 제공해야 할 수 있습니다.


---------------------------------------------------------------------------------------------------------------------------------------------------
1. 뷰의 업데이트 가능성:
일반적으로 집계 함수와 GROUP BY를 사용한 뷰는 수정이 불가능합니다. 
이는 뷰가 기본 테이블의 데이터를 집계하여 보여주는 것이므로, 수정할 수 없습니다.

2. 뷰의 데이터 제약과 업데이트:
뷰는 일부 조건에 따라 데이터를 필터링하거나 가공하여 보여주는 것이므로, 모든 데이터 조작이 가능한 것은 아닙니다.
INSERT, UPDATE, DELETE 작업은 뷰의 정의와 기반 테이블의 제약 조건에 따라 제한됩니다.

3. WITH CHECK OPTION 구문:
WITH CHECK OPTION 구문은 뷰에 데이터를 삽입할 때, 뷰의 조건을 충족하는 데이터만 삽입할 수 있도록 제한합니다.
예를 들어, 키가 177 이상인 데이터만 보여주는 뷰에 새 데이터를 삽입할 때 조건을 검사하여 삽입을 제한할 수 있습니다.

4. 복합뷰(조인뷰)의 삽입 제한:
복합뷰(조인뷰)는 두 개 이상의 테이블을 조인하여 만든 뷰입니다. 
이러한 뷰에는 직접적인 데이터 삽입이 불가능합니다.

5. 데이터베이스 객체 확인 및 의존성:
데이터베이스 객체(테이블, 뷰 등)간의 의존성은 데이터베이스의 시스템 카탈로그를 통해 확인할 수 있습니다.
예를 들어, information_schema 뷰를 사용하여 특정 뷰가 어떤 테이블을 참조하는지 확인할 수 있습니다.

6. 데이터베이스 객체 삭제 시 뷰의 영향:
특정 테이블이나 다른 객체를 삭제하면 해당 객체를 참조하고 있는 뷰는 더 이상 유효하지 않아 실행되지 않습니다.

7. 정리:
뷰는 데이터를 보유하지 않고 기존 테이블의 논리적인 조합을 제공하는 객체이므로, 일부 작업에 대해서는 제약이 있습니다. 
데이터베이스 객체의 관계와 의존성을 이해하고, 
뷰를 효과적으로 활용하기 위해서는 뷰의 업데이트 가능성과 제약을 숙지하는 것이 중요합니다.
